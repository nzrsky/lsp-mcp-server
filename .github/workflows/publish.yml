name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
        type: string

env:
  ZIG_VERSION: '0.14.1'

jobs:
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Create package.json
      run: |
        cat > package.json << 'EOF'
        {
          "name": "lsp-mcp-server",
          "version": "${GITHUB_REF#refs/tags/v}",
          "description": "Language Server Protocol to Model Context Protocol bridge",
          "main": "bin/lsp-mcp-server",
          "bin": {
            "lsp-mcp-server": "./bin/lsp-mcp-server"
          },
          "scripts": {
            "postinstall": "node scripts/download-binary.js"
          },
          "keywords": ["lsp", "mcp", "language-server", "ai", "zig"],
          "author": "Alexey Nazarov <nazarov@ptr.vc>",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "https://github.com/nzrsky/lsp-mcp-server.git"
          },
          "homepage": "https://github.com/nzrsky/lsp-mcp-server",
          "engines": {
            "node": ">=16"
          }
        }
        EOF
        
    - name: Create download script
      run: |
        mkdir -p scripts
        cat > scripts/download-binary.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');
        
        const version = process.env.npm_package_version;
        const platform = process.platform;
        const arch = process.arch;
        
        let filename;
        if (platform === 'win32') {
          filename = `lsp-mcp-server-v${version}-x86_64-windows.zip`;
        } else if (platform === 'darwin') {
          filename = arch === 'arm64' 
            ? `lsp-mcp-server-v${version}-aarch64-macos.tar.gz`
            : `lsp-mcp-server-v${version}-x86_64-macos.tar.gz`;
        } else {
          filename = arch === 'arm64'
            ? `lsp-mcp-server-v${version}-aarch64-linux.tar.gz`
            : `lsp-mcp-server-v${version}-x86_64-linux.tar.gz`;
        }
        
        const url = `https://github.com/nzrsky/lsp-mcp-server/releases/download/v${version}/${filename}`;
        
        console.log(`Downloading ${url}...`);
        
        // Download and extract binary
        // Implementation would go here
        EOF
        
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Create Python package
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup
        import os
        
        version = os.getenv('GITHUB_REF', 'v0.0.0').replace('refs/tags/v', '')
        
        setup(
            name='lsp-mcp-server',
            version=version,
            description='Language Server Protocol to Model Context Protocol bridge',
            long_description=open('README.md').read(),
            long_description_content_type='text/markdown',
            author='Alexey Nazarov',
            author_email='nazarov@ptr.vc',
            url='https://github.com/nzrsky/lsp-mcp-server',
            license='MIT',
            classifiers=[
                'Development Status :: 4 - Beta',
                'Intended Audience :: Developers',
                'License :: OSI Approved :: MIT License',
                'Programming Language :: Python :: 3',
                'Programming Language :: Python :: 3.8',
                'Programming Language :: Python :: 3.9',
                'Programming Language :: Python :: 3.10',
                'Programming Language :: Python :: 3.11',
                'Programming Language :: Python :: 3.12',
            ],
            python_requires='>=3.8',
            entry_points={
                'console_scripts': [
                    'lsp-mcp-server=lsp_mcp_server:main',
                ],
            },
            py_modules=['lsp_mcp_server'],
        )
        EOF
        
        cat > lsp_mcp_server.py << 'EOF'
        #!/usr/bin/env python3
        """
        Python wrapper for lsp-mcp-server binary
        """
        import os
        import sys
        import subprocess
        import platform
        from pathlib import Path
        
        def get_binary_path():
            """Get the path to the lsp-mcp-server binary"""
            package_dir = Path(__file__).parent
            binary_name = 'lsp-mcp-server.exe' if platform.system() == 'Windows' else 'lsp-mcp-server'
            return package_dir / 'bin' / binary_name
        
        def main():
            """Main entry point"""
            binary_path = get_binary_path()
            if not binary_path.exists():
                print(f"Binary not found: {binary_path}", file=sys.stderr)
                sys.exit(1)
            
            # Execute the binary with all arguments
            try:
                result = subprocess.run([str(binary_path)] + sys.argv[1:])
                sys.exit(result.returncode)
            except KeyboardInterrupt:
                sys.exit(130)
            except Exception as e:
                print(f"Error executing binary: {e}", file=sys.stderr)
                sys.exit(1)
        
        if __name__ == '__main__':
            main()
        EOF
        
    - name: Build package
      run: python -m build
      
    - name: Publish to PyPI
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: [publish-npm, publish-pypi]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, '-') }}  # Only for stable releases
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      
    - name: Update Homebrew formula
      env:
        GITHUB_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Calculate SHA256 for the macOS x86_64 release
        wget -O lsp-mcp-server.tar.gz \
          "https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/lsp-mcp-server-${TAG_NAME}-x86_64-macos.tar.gz"
        SHA256=$(sha256sum lsp-mcp-server.tar.gz | cut -d' ' -f1)
        
        # Clone homebrew tap (create if doesn't exist)
        git clone https://github.com/nzrsky/homebrew-tap.git || {
          mkdir homebrew-tap
          cd homebrew-tap
          git init
          git remote add origin https://github.com/nzrsky/homebrew-tap.git
        }
        
        cd homebrew-tap
        
        # Create/update formula
        cat > Formula/lsp-mcp-server.rb << EOF
        class LspMcpServer < Formula
          desc "Language Server Protocol to Model Context Protocol bridge"
          homepage "https://github.com/nzrsky/lsp-mcp-server"
          url "https://github.com/nzrsky/lsp-mcp-server/releases/download/${TAG_NAME}/lsp-mcp-server-${TAG_NAME}-x86_64-macos.tar.gz"
          sha256 "${SHA256}"
          license "MIT"
          version "${TAG_NAME#v}"
        
          def install
            bin.install "lsp-mcp-server"
          end
        
          test do
            system "#{bin}/lsp-mcp-server", "--help"
          end
        end
        EOF
        
        # Commit and push
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git add Formula/lsp-mcp-server.rb
        git commit -m "Update lsp-mcp-server to ${TAG_NAME}"
        git push origin main

  announce-release:
    name: Announce Release
    needs: [publish-npm, publish-pypi, update-homebrew]
    runs-on: ubuntu-latest
    steps:
    - name: Create announcement
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "ðŸŽ‰ lsp-mcp-server ${TAG_NAME} has been released!"
        echo ""
        echo "ðŸ“¦ Available on:"
        echo "â€¢ GitHub Releases: https://github.com/nzrsky/lsp-mcp-server/releases/tag/${TAG_NAME}"
        echo "â€¢ Docker: ghcr.io/nzrsky/lsp-mcp-server:${TAG_NAME#v}"
        echo "â€¢ npm: npm install -g lsp-mcp-server"
        echo "â€¢ PyPI: pip install lsp-mcp-server"
        echo "â€¢ Homebrew: brew install nzrsky/tap/lsp-mcp-server"